# Check the number of correlation

leave-one-out to get the overlap of correlation, only select the orthologs and TEs exist in human and NHPs

1. Create a metadata to select human sample (leave-one-out)
2. Create a function to execute correlation results

```{r}
library(dplyr)
library(twice)
library(TEKRABber)
data("hmKZNFs337") #337 KRAB-ZNFs in human
```

```{r}
# 1. create meta data 
df_meta <- metadata %>%
    left_join(brain_meta, join_by(brain_region == region))

```

```{r}
# 2. do TPM conversion in human and NHPs
# 2-1. TPM in human
# genes convert to tpm
hmGene_temp <- hmGene[,c(-1)]
sample_counts <- colSums(hmGene_temp)

scaling_factor <- sample_counts / 1e6

hmGene_tpm <- hmGene_temp
hmGene_tpm <- t(t(hmGene_tpm)/ scaling_factor + 1) * 1e6
hmGene_tpm <- as.data.frame(hmGene_tpm)
rownames(hmGene_tpm) <- hmGene$geneID

# sebset only KRAB-ZNFs
kznfs_tpm <- hmGene_tpm %>%
    filter(rownames(.) %in% hmKZNFs337$ensembl_gene_id) %>%
    mutate(name = rownames(.)) %>%
    left_join(hmKZNFs337, join_by("name"=="ensembl_gene_id"))
rownames(kznfs_tpm) <- kznfs_tpm$external_gene_name
kznfs_tpm <- kznfs_tpm[,c(1:132)]


# tes convert to tpm
hmTE_temp <- hmTE[,-c(1,2,3)]
te_count <- colSums(hmTE_temp)
te_scale <- te_count / 1e6
hmTE_tpm <- hmTE_temp
hmTE_tpm <- t(t(hmTE_tpm)/ te_scale + 1) * 1e6
hmTE_tpm <- as.data.frame(hmTE_tpm)
rownames(hmTE_tpm) <- hmTE$name
```

Because we need to convert gene ID to name, we create a function
```{r}
convertIDtoName <- function(df, species){
    df_gene <- df[,c(-1)]
    ensIDlist <- df$geneID
    geneName <- gprofiler2::gconvert(
        query = ensIDlist,
        organism = species,
        target="ENSG",
        mthreshold = Inf,
        filter_na = TRUE
    )
    
    geneName <- geneName %>% select(c(target, name))
    
    df_kznf <- df %>%
        inner_join(geneName, join_by(geneID==target)) %>%
        filter(name %in% hmKZNFs337$external_gene_name)

    rownames(df_kznf) <- df_kznf$name
    df_kznf <- df_kznf[,-c(1, ncol(df_kznf))]
    df_kznf
}
```


```{r}
# 2-2 TPM in chimp
ptGene_temp <- ptGene[,c(-1)]
sample_counts <- colSums(ptGene_temp)

scaling_factor <- sample_counts / 1e6

ptGene_tpm <- ptGene_temp
ptGene_tpm <- t(t(ptGene_tpm)/ scaling_factor + 1) * 1e6
ptGene_tpm <- as.data.frame(ptGene_tpm)
ptGene_tpm$geneID <- ptGene$geneID
ptGene_tpm <- ptGene_tpm[,c(ncol(ptGene_tpm), 1:ncol(ptGene_tpm)-1)]

# sebset only KRAB-ZNFs and convert ID to name
pt_kznfs_tpm <- convertIDtoName(ptGene_tpm, "ptroglodytes")

# tes convert to tpm
ptTE_temp <- ptTE[,-c(1,2,3)]
te_count <- colSums(ptTE_temp)
te_scale <- te_count / 1e6
ptTE_tpm <- ptTE_temp
ptTE_tpm <- t(t(ptTE_tpm)/ te_scale + 1) * 1e6
ptTE_tpm <- as.data.frame(ptTE_tpm)
rownames(ptTE_tpm) <- ptTE$name
```

```{r}
# 2-3 TPM in bonobo
ppGene_temp <- ppGene[,c(-1)]
sample_counts <- colSums(ppGene_temp)

scaling_factor <- sample_counts / 1e6

ppGene_tpm <- ppGene_temp
ppGene_tpm <- t(t(ppGene_tpm)/ scaling_factor + 1) * 1e6
ppGene_tpm <- as.data.frame(ppGene_tpm)
ppGene_tpm$geneID <- ppGene$geneID
ppGene_tpm <- ppGene_tpm[,c(ncol(ppGene_tpm), 1:ncol(ppGene_tpm)-1)]

# sebset only KRAB-ZNFs and convert ID to name
pp_kznfs_tpm <- convertIDtoName(ppGene_tpm, "ppaniscus")

# tes convert to tpm
ppTE_tmp <- ppTE[!duplicated(ppTE$name), ]
ppTE_temp <- ppTE_tmp[,-c(1,2,3)]
te_count <- colSums(ppTE_temp)
te_scale <- te_count / 1e6
ppTE_tpm <- ppTE_temp
ppTE_tpm <- t(t(ppTE_tpm)/ te_scale + 1) * 1e6
ppTE_tpm <- as.data.frame(ppTE_tpm)
rownames(ppTE_tpm) <- ppTE_tmp$name
```

```{r}
# 2-4 TPM in macaque
mmGene_temp <- mmGene[,c(-1)]
sample_counts <- colSums(mmGene_temp)

scaling_factor <- sample_counts / 1e6

mmGene_tpm <- mmGene_temp
mmGene_tpm <- t(t(mmGene_tpm)/ scaling_factor + 1) * 1e6
mmGene_tpm <- as.data.frame(mmGene_tpm)
mmGene_tpm$geneID <- mmGene$geneID
mmGene_tpm <- mmGene_tpm[,c(ncol(mmGene_tpm), 1:ncol(mmGene_tpm)-1)]

# sebset only KRAB-ZNFs and convert ID to name
mm_kznfs_tpm <- convertIDtoName(mmGene_tpm, "mmulatta")

# tes convert to tpm
mmTE_tmp <- mmTE[!duplicated(mmTE$name), ]
mmTE_temp <- mmTE_tmp[,-c(1,2,3)]
te_count <- colSums(mmTE_temp)
te_scale <- te_count / 1e6
mmTE_tpm <- mmTE_temp
mmTE_tpm <- t(t(mmTE_tpm)/ te_scale + 1) * 1e6
mmTE_tpm <- as.data.frame(mmTE_tpm)
rownames(mmTE_tpm) <- mmTE_tmp$name
```

We first see how many overlapped of ortholog of KRAB-ZNFs and TEs

```{r}
# overlap kznfs
h_kznf <- rownames(kznfs_tpm) #337
pt_kznf <- rownames(pt_kznfs_tpm) #292
pp_kznf <- rownames(pp_kznfs_tpm) #216
mm_kznf <- rownames(mm_kznfs_tpm) #245

# overlap TEs
overlapped_kznfs <- Reduce(intersect, list(h_kznf, pt_kznf, pp_kznf, mm_kznf))
overlapped_TEs <- Reduce(intersect, list(rownames(hmTE_tpm), rownames(ptTE_tpm), 
                                         rownames(ppTE_tpm), rownames(mmTE_tpm)))
```

```{r}
# load data
hsc1 <- read.csv("../tables/hsC1_corr_sig.csv")
hsc1_select <- hsc1 %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs)

hsc2 <- read.csv("../tables/hsC2_corr_sig.csv")
hsc2_select <- hsc2 %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs)

pt_tpm_corr <- readRDS("../../randomGeneSet/correlation_scripts/pt_tpm_corr.rds")

ptc1 <- pt_tpm_corr$pt_c1_corr %>% 
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs & padj<0.01 & abs(coef)>0.4)
ptc2 <- pt_tpm_corr$pt_c2_corr %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs & padj<0.01 & abs(coef)>0.4)

pp_tpm_corr <- readRDS("../../randomGeneSet/correlation_scripts/pp_tpm_corr.rds")

ppc1 <- pp_tpm_corr$pp_c1_corr %>% filter(padj<0.01) %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs & padj<0.01 & abs(coef)>0.4)

ppc2 <- pp_tpm_corr$pp_c2_corr %>% filter(padj<0.01) %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs & padj<0.01 & abs(coef)>0.4)

mm_tpm_corr <- readRDS("../../randomGeneSet/correlation_scripts/mm_tpm_corr.rds")
mmc1 <- mm_tpm_corr$mm_c1_corr %>% filter(padj<0.01) %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs & padj<0.01 & abs(coef)>0.4)
mmc2 <- mm_tpm_corr$mm_c2_corr %>% filter(padj<0.01) %>%
    filter(geneName %in% overlapped_kznfs & teName %in% overlapped_TEs & padj<0.01 & abs(coef)>0.4)

```



```{r}
# sample ID list
hmc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Homo sapiens")
hmc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Homo sapiens")

ptc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Pan troglodytes")
ptc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Pan troglodytes")

ppc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Pan paniscus")
ppc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Pan paniscus")

mmc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Macaca mulatta")
mmc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Macaca mulatta")
```


```{r}
human_cor <- function(dfgene, dfte, idlist){
    
    corr_list <- list()
    
    indv_list <- c("ha", "hb", "hc", "hd")
    
    for (id in indv_list) {
       id_select <- idlist %>% filter(!individual %in% id)
       gene <- dfgene[overlapped_kznfs, id_select$Run]
       te <- dfte[overlapped_TEs, id_select$Run]
       
       corr <- corrOrthologTE(
           geneInput = gene,
           teInput = te,
           numCore = 3
       )
       
       corr_list <- append(corr_list, list(corr))  
       
    }
    
    corr_list
    
}
```

```{r}
hmc1_corr_leaveOne <- human_cor(kznfs_tpm, hmTE_tpm, hmc1_id)
hmc2_corr_leaveOne <- human_cor(kznfs_tpm, hmTE_tpm, hmc2_id)
```

```{r}
ptc1_corr <- corrOrthologTE(
    geneInput = pt_kznfs_tpm[overlapped_kznfs, ptc1_id$Run],
    teInput = ptTE_tpm[overlapped_TEs, ptc1_id$Run],
    numCore = 3
)

ptc2_corr <- corrOrthologTE(
    geneInput = pt_kznfs_tpm[overlapped_kznfs, ptc2_id$Run],
    teInput = ptTE_tpm[overlapped_TEs, ptc2_id$Run],
    numCore = 3
)

ppc1_corr <- corrOrthologTE(
    geneInput = pp_kznfs_tpm[overlapped_kznfs, ppc1_id$Run],
    teInput = ppTE_tpm[overlapped_TEs, ppc1_id$Run],
    numCore = 3
)

ppc2_corr <- corrOrthologTE(
    geneInput = pp_kznfs_tpm[overlapped_kznfs, ppc2_id$Run],
    teInput = ppTE_tpm[overlapped_TEs, ppc2_id$Run],
    numCore = 3
)

mmc1_corr <- corrOrthologTE(
    geneInput = mm_kznfs_tpm[overlapped_kznfs, mmc1_id$Run],
    teInput = mmTE_tpm[overlapped_TEs, mmc1_id$Run],
    numCore =3
)

mmc2_corr <- corrOrthologTE(
    geneInput = mm_kznfs_tpm[overlapped_kznfs, mmc2_id$Run],
    teInput = mmTE_tpm[overlapped_TEs, mmc2_id$Run],
    numCore =3
)

```

After correlation analysis, we can count the number

```{r}
# human c1
c1_a <- hmc1_corr_leaveOne[[1]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c1_b <- hmc1_corr_leaveOne[[2]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c1_c <- hmc1_corr_leaveOne[[3]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c1_d <- hmc1_corr_leaveOne[[4]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))

c1_overlap <- Reduce(intersect, list(c1_a$pair, c1_b$pair, c1_c$pair, c1_d$pair))

c2_a <- hmc2_corr_leaveOne[[1]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c2_b <- hmc2_corr_leaveOne[[2]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c2_c <- hmc2_corr_leaveOne[[3]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c2_d <- hmc2_corr_leaveOne[[4]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))

c2_overlap <- Reduce(intersect, list(c2_a$pair, c2_b$pair, c2_c$pair, c2_d$pair))

```

```{r}
print_sig <- function(df){
    pos <- df %>% filter(padj<0.01 & coef>0.4) %>% nrow()
    neg <- df %>% filter(padj<0.01 & coef< -0.4) %>% nrow()
    
    print(paste0("positive: ", pos))
    print(paste0("negative: ", neg))
}
```


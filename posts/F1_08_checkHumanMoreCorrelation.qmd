# Check the number of correlation

leave-one-out to get the overlap of correlation, only select the orthologs and TEs exist in human and NHPs

1.  Create a metadata to select human sample (leave-one-out)
2.  Create a function to execute correlation results

```{r}
library(dplyr)
library(twice)
library(TEKRABber)
data("hmKZNFs337") #337 KRAB-ZNFs in human
data("hg19rmsk_info")
```

```{r}
# 1. create meta data 
df_meta <- metadata %>%
    left_join(brain_meta, join_by(brain_region == region))

```

```{r}
# 2. do TPM conversion in human and NHPs
# 2-1. TPM in human
# genes convert to tpm
hmGene_temp <- hmGene[,c(-1)]
sample_counts <- colSums(hmGene_temp)

scaling_factor <- sample_counts / 1e6

hmGene_tpm <- hmGene_temp
hmGene_tpm <- t(t(hmGene_tpm)/ scaling_factor + 1) * 1e6
hmGene_tpm <- as.data.frame(hmGene_tpm)
rownames(hmGene_tpm) <- hmGene$geneID

# sebset only KRAB-ZNFs
kznfs_tpm <- hmGene_tpm %>%
    filter(rownames(.) %in% hmKZNFs337$ensembl_gene_id) %>%
    mutate(name = rownames(.)) %>%
    left_join(hmKZNFs337, join_by("name"=="ensembl_gene_id"))
rownames(kznfs_tpm) <- kznfs_tpm$external_gene_name
kznfs_tpm <- kznfs_tpm[,c(1:132)]


# tes convert to tpm
hmTE_temp <- hmTE[,-c(1,2,3)]
te_count <- colSums(hmTE_temp)
te_scale <- te_count / 1e6
hmTE_tpm <- hmTE_temp
hmTE_tpm <- t(t(hmTE_tpm)/ te_scale + 1) * 1e6
hmTE_tpm <- as.data.frame(hmTE_tpm)
rownames(hmTE_tpm) <- hmTE$name
```

Because we need to convert gene ID to name, we create a function

```{r}
convertIDtoName <- function(df, species){
    df_gene <- df[,c(-1)]
    ensIDlist <- df$geneID
    geneName <- gprofiler2::gconvert(
        query = ensIDlist,
        organism = species,
        target="ENSG",
        mthreshold = Inf,
        filter_na = TRUE
    )
    
    geneName <- geneName %>% select(c(target, name))
    
    df_kznf <- df %>%
        inner_join(geneName, join_by(geneID==target)) %>%
        filter(name %in% hmKZNFs337$external_gene_name)

    rownames(df_kznf) <- df_kznf$name
    df_kznf <- df_kznf[,-c(1, ncol(df_kznf))]
    df_kznf
}
```

```{r}
# 2-2 TPM in chimp
ptGene_temp <- ptGene[,c(-1)]
sample_counts <- colSums(ptGene_temp)

scaling_factor <- sample_counts / 1e6

ptGene_tpm <- ptGene_temp
ptGene_tpm <- t(t(ptGene_tpm)/ scaling_factor + 1) * 1e6
ptGene_tpm <- as.data.frame(ptGene_tpm)
ptGene_tpm$geneID <- ptGene$geneID
ptGene_tpm <- ptGene_tpm[,c(ncol(ptGene_tpm), 1:ncol(ptGene_tpm)-1)]

# sebset only KRAB-ZNFs and convert ID to name
pt_kznfs_tpm <- convertIDtoName(ptGene_tpm, "ptroglodytes")

# tes convert to tpm
ptTE_temp <- ptTE[,-c(1,2,3)]
te_count <- colSums(ptTE_temp)
te_scale <- te_count / 1e6
ptTE_tpm <- ptTE_temp
ptTE_tpm <- t(t(ptTE_tpm)/ te_scale + 1) * 1e6
ptTE_tpm <- as.data.frame(ptTE_tpm)
rownames(ptTE_tpm) <- ptTE$name
```

```{r}
# 2-3 TPM in bonobo
ppGene_temp <- ppGene[,c(-1)]
sample_counts <- colSums(ppGene_temp)

scaling_factor <- sample_counts / 1e6

ppGene_tpm <- ppGene_temp
ppGene_tpm <- t(t(ppGene_tpm)/ scaling_factor + 1) * 1e6
ppGene_tpm <- as.data.frame(ppGene_tpm)
ppGene_tpm$geneID <- ppGene$geneID
ppGene_tpm <- ppGene_tpm[,c(ncol(ppGene_tpm), 1:ncol(ppGene_tpm)-1)]

# sebset only KRAB-ZNFs and convert ID to name
pp_kznfs_tpm <- convertIDtoName(ppGene_tpm, "ppaniscus")

# tes convert to tpm
ppTE_tmp <- ppTE[!duplicated(ppTE$name), ]
ppTE_temp <- ppTE_tmp[,-c(1,2,3)]
te_count <- colSums(ppTE_temp)
te_scale <- te_count / 1e6
ppTE_tpm <- ppTE_temp
ppTE_tpm <- t(t(ppTE_tpm)/ te_scale + 1) * 1e6
ppTE_tpm <- as.data.frame(ppTE_tpm)
rownames(ppTE_tpm) <- ppTE_tmp$name
```

```{r}
# 2-4 TPM in macaque
mmGene_temp <- mmGene[,c(-1)]
sample_counts <- colSums(mmGene_temp)

scaling_factor <- sample_counts / 1e6

mmGene_tpm <- mmGene_temp
mmGene_tpm <- t(t(mmGene_tpm)/ scaling_factor + 1) * 1e6
mmGene_tpm <- as.data.frame(mmGene_tpm)
mmGene_tpm$geneID <- mmGene$geneID
mmGene_tpm <- mmGene_tpm[,c(ncol(mmGene_tpm), 1:ncol(mmGene_tpm)-1)]

# sebset only KRAB-ZNFs and convert ID to name
mm_kznfs_tpm <- convertIDtoName(mmGene_tpm, "mmulatta")

# tes convert to tpm
mmTE_tmp <- mmTE[!duplicated(mmTE$name), ]
mmTE_temp <- mmTE_tmp[,-c(1,2,3)]
te_count <- colSums(mmTE_temp)
te_scale <- te_count / 1e6
mmTE_tpm <- mmTE_temp
mmTE_tpm <- t(t(mmTE_tpm)/ te_scale + 1) * 1e6
mmTE_tpm <- as.data.frame(mmTE_tpm)
rownames(mmTE_tpm) <- mmTE_tmp$name
```

We first see how many overlapped of ortholog of KRAB-ZNFs and TEs

```{r}
# overlap kznfs
h_kznf <- rownames(kznfs_tpm) #337
pt_kznf <- rownames(pt_kznfs_tpm) #292
pp_kznf <- rownames(pp_kznfs_tpm) #216
mm_kznf <- rownames(mm_kznfs_tpm) #245

# overlap TEs
overlapped_kznfs <- Reduce(intersect, list(h_kznf, pt_kznf, pp_kznf, mm_kznf)) #178 overlapped KRAB-ZNFs
overlapped_TEs <- Reduce(intersect, list(rownames(hmTE_tpm), rownames(ptTE_tpm), 
                                         rownames(ppTE_tpm), rownames(mmTE_tpm))) #836 overlapped TEs
```

## Calculate correlation based on these overlapped KRAB-ZNFs and TEs

We first calculate the leave-one-out in human (cluster1 and cluster2)

```{r}
# we first get the cluster1 and cluster2 ID in each species
hmc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Homo sapiens")
hmc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Homo sapiens")

ptc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Pan troglodytes")
ptc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Pan troglodytes")

ppc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Pan paniscus")
ppc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Pan paniscus")

mmc1_id <- df_meta %>% filter(cluster=="cluster1" & Organism=="Macaca mulatta")
mmc2_id <- df_meta %>% filter(cluster=="cluster2" & Organism=="Macaca mulatta")
```

Leave one out start:

```{r}
human_cor <- function(dfgene, dfte, idlist){
    
    corr_list <- list()
    
    indv_list <- c("ha", "hb", "hc", "hd")
    
    for (id in indv_list) {
       id_select <- idlist %>% filter(!individual %in% id)
       gene <- dfgene[overlapped_kznfs, id_select$Run]
       te <- dfte[overlapped_TEs, id_select$Run]
       
       corr <- corrOrthologTE(
           geneInput = gene,
           teInput = te,
           numCore = 3
       )
       
       corr_list <- append(corr_list, list(corr))  
       
    }
    
    corr_list
    
}

hmc1_corr_leaveOne <- human_cor(kznfs_tpm, hmTE_tpm, hmc1_id)
hmc2_corr_leaveOne <- human_cor(kznfs_tpm, hmTE_tpm, hmc2_id)
```

Try to get the overlapped results in cluster 1 and cluster 2:

```{r}
# human c1
c1_a <- hmc1_corr_leaveOne[[1]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c1_b <- hmc1_corr_leaveOne[[2]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c1_c <- hmc1_corr_leaveOne[[3]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c1_d <- hmc1_corr_leaveOne[[4]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))

c1_overlap <- Reduce(intersect, list(c1_a$pair, c1_b$pair, c1_c$pair, c1_d$pair)) #31891

c2_a <- hmc2_corr_leaveOne[[1]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c2_b <- hmc2_corr_leaveOne[[2]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c2_c <- hmc2_corr_leaveOne[[3]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))
c2_d <- hmc2_corr_leaveOne[[4]] %>% filter(padj<0.01 & abs(coef)>0.4) %>% mutate(pair=paste0(geneName, ":", teName))

c2_overlap <- Reduce(intersect, list(c2_a$pair, c2_b$pair, c2_c$pair, c2_d$pair)) #4444
```

A sanity check, to see the overlapped are the same direction

```{r}
library(ComplexHeatmap)

corr_set <- function(df, filter_list){
    
    all <- df %>% filter(pair %in% filter_list)
    pos <- all %>% filter(coef > 0)
    neg <- all %>% filter(coef < 0)
    
    result <- list(
        all = all$pair,
        pos = pos$pair,
        neg = neg$pair
    )
    
    result
    
}

# cluster 1
c1_a_set <- corr_set(c1_a, c1_overlap)
c1_b_set <- corr_set(c1_b, c1_overlap)
c1_c_set <- corr_set(c1_c, c1_overlap)
c1_d_set <- corr_set(c1_d, c1_overlap)

lt_c1 <- list(
    c1_a_p = c1_a_set$pos,
    c1_a_n = c1_a_set$neg,
    c1_b_p = c1_b_set$pos,
    c1_b_n = c1_b_set$neg,
    c1_c_p = c1_c_set$pos,
    c1_c_n = c1_c_set$neg,
    c1_d_p = c1_d_set$pos,
    c1_d_n = c1_d_set$neg)
    
m_c1 <- make_comb_mat(lt_c1)

png("../figures/upset_plot_c1_leaveOneOut.png", width=4, height=5, units="in", res=400)
u_c1 <- UpSet(m_c1, comb_order=order(-comb_size(m_c1)), top_annotation=upset_top_annotation(m_c1, add_numbers=TRUE))
print(u_c1)
dev.off()

# cluster 2
c2_a_set <- corr_set(c2_a, c2_overlap)
c2_b_set <- corr_set(c2_b, c2_overlap)
c2_c_set <- corr_set(c2_c, c2_overlap)
c2_d_set <- corr_set(c2_d, c2_overlap)

lt_c2 <- list(
    c2_a_p = c2_a_set$pos,
    c2_a_n = c2_a_set$neg,
    c2_b_p = c2_b_set$pos,
    c2_b_n = c2_b_set$neg,
    c2_c_p = c2_c_set$pos,
    c2_c_n = c2_c_set$neg,
    c2_d_p = c2_d_set$pos,
    c2_d_n = c2_d_set$neg)
    
m_c2 <- make_comb_mat(lt_c2)

png("../figures/upset_plot_c2_leaveOneOut.png", width=4, height=5, units="in", res=400)
u_c2 <- UpSet(m_c2, comb_order=order(-comb_size(m_c2)), top_annotation=upset_top_annotation(m_c2, add_numbers=TRUE))
print(u_c2)
dev.off()



```

![](/figures/upset_plot_c1_leaveOneOut.png){width="317"}

![](/figures/upset_plot_c2_leaveOneOut.png){width="321"}

Next we calculate the correlations in NHPs:

```{r}
ptc1_corr <- corrOrthologTE(
    geneInput = pt_kznfs_tpm[overlapped_kznfs, ptc1_id$Run],
    teInput = ptTE_tpm[overlapped_TEs, ptc1_id$Run],
    numCore = 3
)

ptc2_corr <- corrOrthologTE(
    geneInput = pt_kznfs_tpm[overlapped_kznfs, ptc2_id$Run],
    teInput = ptTE_tpm[overlapped_TEs, ptc2_id$Run],
    numCore = 3
)

ppc1_corr <- corrOrthologTE(
    geneInput = pp_kznfs_tpm[overlapped_kznfs, ppc1_id$Run],
    teInput = ppTE_tpm[overlapped_TEs, ppc1_id$Run],
    numCore = 3
)

ppc2_corr <- corrOrthologTE(
    geneInput = pp_kznfs_tpm[overlapped_kznfs, ppc2_id$Run],
    teInput = ppTE_tpm[overlapped_TEs, ppc2_id$Run],
    numCore = 3
)

mmc1_corr <- corrOrthologTE(
    geneInput = mm_kznfs_tpm[overlapped_kznfs, mmc1_id$Run],
    teInput = mmTE_tpm[overlapped_TEs, mmc1_id$Run],
    numCore =3
)

mmc2_corr <- corrOrthologTE(
    geneInput = mm_kznfs_tpm[overlapped_kznfs, mmc2_id$Run],
    teInput = mmTE_tpm[overlapped_TEs, mmc2_id$Run],
    numCore =3
)
```

Then we use the same filtering criteria, coefficient larger than 0.4 or lower than -0.4 with adjusted p-value less than 0.01.

```{r}
# This function is for filling the excel table:
print_sig <- function(df){
    pos <- df %>% filter(padj<0.01 & coef>0.4) %>% nrow()
    neg <- df %>% filter(padj<0.01 & coef< -0.4) %>% nrow()
    
    print(paste0("positive: ", pos))
    print(paste0("negative: ", neg))
}

print_unique_len <- function(df){
    df_sig <- df %>% filter(padj<0.01 & abs(coef)>0.4)
    num_g <- length(unique(df_sig$geneName))
    num_t <- length(unique(df_sig$teName))
    
    print(paste0("krab-znf unique count: ", num_g))
    print(paste0("te unique count: ", num_t))
    
}
```

Finally, we use upsteplot to see their overlap:

Q1: Do human have more correlations?

Q2: What is the identity of subset? for example, human-specific.

```{r}
corr_obj <- function(df){
    
    df_sig <- df %>% 
        filter(abs(coef)>0.4 & padj<0.01) %>%
        mutate(pair=paste0(teName, ":", geneName))
    
    all <- df_sig$pair
    pos <- df_sig %>% filter(coef>0)
    neg <- df_sig %>% filter(coef<0)
    
    result <- list(
        pos=pos$pair,
        neg=neg$pair
    )
    
    result
}

# cluster 1
hm_cluster1 <- c1_a %>%
    filter(pair %in% c1_overlap) # save human cluster1 using this
hm_cluster1 <- corr_obj(hm_cluster1)

chimp_cluster1 <- corr_obj(ptc1_corr)
bonobo_cluster1 <- corr_obj(ppc1_corr)
maca_cluster1 <- corr_obj(mmc1_corr)

pbd_c1 <- list(
    hs_p = hm_cluster1$pos,
    hs_n = hm_cluster1$neg,
    pt_p = chimp_cluster1$pos,
    pt_n = chimp_cluster1$neg,
    pp_p = bonobo_cluster1$pos,
    pp_n = bonobo_cluster1$neg,
    mm_p = maca_cluster1$pos,
    mm_n = maca_cluster1$neg)
    
m_pbd_c1 <- make_comb_mat(pbd_c1)

png("../figures/upset_plot_c1_pbd.png", width=6, height=5, units="in", res=400)
u_pbd_c1 <- UpSet(m_pbd_c1, comb_order=order(-comb_size(m_pbd_c1)), 
              top_annotation=upset_top_annotation(m_pbd_c1, add_numbers=TRUE))
print(u_pbd_c1)
dev.off()

# cluster 2
hm_cluster2 <- c2_a %>%
    filter(pair %in% c2_overlap)
hm_cluster2 <- corr_obj(hm_cluster2)

chimp_cluster2 <- corr_obj(ptc2_corr)
bonobo_cluster2 <- corr_obj(ppc2_corr)
maca_cluster2 <- corr_obj(mmc2_corr)

pbd_c2 <- list(
    hs_p = hm_cluster2$pos,
    hs_n = hm_cluster2$neg,
    pt_p = chimp_cluster2$pos,
    pt_n = chimp_cluster2$neg,
    pp_p = bonobo_cluster2$pos,
    pp_n = bonobo_cluster2$neg,
    mm_p = maca_cluster2$pos,
    mm_n = maca_cluster2$neg)
    
m_pbd_c2 <- make_comb_mat(pbd_c2)

png("../figures/upset_plot_c2_pbd.png", width=6, height=5, units="in", res=400)
u_pbd_c2 <- UpSet(m_pbd_c2, comb_order=order(-comb_size(m_pbd_c2)), 
              top_annotation=upset_top_annotation(m_pbd_c2, add_numbers=TRUE))
print(u_pbd_c2)
dev.off()
```

Check the number of correlations and unique KRAB-ZNFs unique TEs with all four human sample

```{r}
human_cor_all4 <- function(dfgene, dfte, idlist){
    
       gene <- dfgene[overlapped_kznfs, idlist$Run]
       te <- dfte[overlapped_TEs, idlist$Run]
       
       corr <- corrOrthologTE(
           geneInput = gene,
           teInput = te,
           numCore = 3
       )
       
       corr
}

hmc1_corr_all4 <- human_cor_all4(kznfs_tpm, hmTE_tpm, hmc1_id)
hmc2_corr_all4 <- human_cor_all4(kznfs_tpm, hmTE_tpm, hmc2_id)
print_sig(hmc1_corr_all4)
print_unique_len(hmc1_corr_all4)
print_sig(hmc2_corr_all4)
print_unique_len(hmc2_corr_all4)
```

## save object for future reproducing result

```{r}
# human
hmc1_corr <- c1_a %>%
    filter(pair %in% c1_overlap) %>%
    mutate(pair = paste0(teName, ":", geneName))

hmc2_corr <- c2_a %>%
    filter(pair %in% c2_overlap) %>%
    mutate(pair = paste0(teName, ":", geneName))

# chimp
ptc1_corr <- ptc1_corr %>% 
    filter(padj<0.01 & abs(coef)>0.4) %>%
    mutate(pair = paste0(teName, ":", geneName))
    
ptc2_corr <- ptc2_corr %>% 
    filter(padj<0.01 & abs(coef)>0.4) %>%
    mutate(pair = paste0(teName, ":", geneName))

# bonobo
ppc1_corr <- ppc1_corr %>%
    filter(padj<0.01 & abs(coef)>0.4) %>%
    mutate(pair = paste0(teName, ":", geneName))

ppc2_corr <- ppc2_corr %>%
    filter(padj<0.01 & abs(coef)>0.4) %>%
    mutate(pair = paste0(teName, ":", geneName))

# macaque
mmc1_corr <- mmc1_corr %>%
    filter(padj<0.01 & abs(coef)>0.4) %>%
    mutate(pair = paste0(teName, ":", geneName))

mmc2_corr <- mmc2_corr %>%
    filter(padj<0.01 & abs(coef)>0.4) %>%
    mutate(pair = paste0(teName, ":", geneName))

# filter 
hmc1_corr_all4 <- hmc1_corr_all4 %>%
    mutate(pair=paste0(teName, ":", geneName)) %>%
    filter(pair %in% hmc1_corr$pair)

hmc2_corr_all4 <- hmc2_corr_all4 %>%
    mutate(pair=paste0(teName, ":", geneName)) %>%
    filter(pair %in% hmc2_corr$pair)

pbd_obj <- list(
    "hmc1_corr"=hmc1_corr_all4,
    "hmc2_corr"=hmc2_corr_all4,
    "ptc1_corr"=ptc1_corr,
    "ptc2_corr"=ptc2_corr,
    "ppc1_corr"=ppc1_corr,
    "ppc2_corr"=ppc2_corr,
    "mmc1_corr"=mmc1_corr,
    "mmc2_corr"=mmc2_corr
)

saveRDS(pbd_obj, file="../data/pbd_obj.rds")
```

## Explore the opposite direction of correlations

Q: what does the opposite looks like?

Q: what are the species specific looks like?

```{r}
# cluster 1 
y_kznf <- kznf_infer %>%filter(age=="young")

hs_p <- hmc1_corr_all4 %>% filter(coef>0) %>% mutate(species="Hs")
pp_n <- ppc1_corr %>% filter(coef<0) %>% mutate(species="Pp")

intersect_hs_pp_276 <- intersect(hs_p$pair, pp_n$pair) #276
df_276 <- rbind(hs_p[hs_p$pair %in% intersect_hs_pp_276,], 
                pp_n[pp_n$pair %in% intersect_hs_pp_276,])

hs_p_276 <- hs_p %>% 
    filter(pair %in% intersect_hs_pp_276) %>%
    mutate(teAge = ifelse(teName %in% te_infer$NM, "young", "old")) %>%
    mutate(kznfAge = ifelse(geneName %in% y_kznf$external_gene_name, "young", "old")) %>%
    mutate(link = ifelse(teAge=="old" & kznfAge=="old", "old", "young")) %>%
    left_join(hg19rmsk_info[,c(1,2)], join_by(teName==gene_id))

```

```{r}
# create a 276 network
library(RCy3)
library(netZooR)

c1.276.kznf <- hs_p_276 %>% select(c(1,9)) %>% unique() #15
colnames(c1.276.kznf) <- c("id", "age")
c1.276.te <- hs_p_276 %>% select(c(2,8)) %>% unique() #180
colnames(c1.276.te) <- c("id", "age")
    
c1.276.node <- rbind(c1.276.kznf, c1.276.te)
c1.276.link <- hs_p_276[,c(1,2,3,10)]
colnames(c1.276.link) <- c("source", "target", "coefficient", "age")

createNetworkFromDataFrames(c1.276.node, c1.276.link)
```

![](/figures/pbd_network_comparison/hs_pp_276.png){width="741"}

Next, we see what is the human positive specific and negative specific one:

```{r}
library(ggplot2)
hs_pp_276_teFamily <- data.frame(t(table(hs_p_276[,c(10, 11)])))
colnames(hs_pp_276_teFamily) <- c("TE_family", "link", "Count")

g_hs_pp_276 <- ggplot(hs_pp_276_teFamily, aes(x=TE_family, y=Count, fill=link)) +
    geom_bar(stat="identity") +
    scale_fill_manual(values = c("old" = "#318ce7", "young" = "#f6b26b")) +  
    coord_flip() +
    theme_bw()

ggsave(g_hs_pp_276, file="../figures/pbd_network_comparison/hs_pp_276_TEfamily.jpg", width=4, height=5)
ggsave(g_hs_pp_276, file="../figures/pbd_network_comparison/hs_pp_276_TEfamily.svg", width=4, height=5)
```

![](/figures/pbd_network_comparison/hs_pp_276_TEfamily.jpg){width="530"}

## Overlapped with ChIP-exo

```{r}
chipexo <- read.csv("../tables/kznfs_TEs_ChIP_exo_modified.csv")
chipexo <- chipexo %>%
    mutate(pair=paste0(teName, ":", geneName))

c1_hm_335 <- read.csv("../tables/c1_confirm_correlation.csv")
c2_hm_64 <- read.csv("../tables/c2_confirm_correlation.csv")

# filter with chipexo
print_chip_result <- function(df) {
    df_filter <- df %>% filter(pair %in% chipexo$pair)
    neg <- df_filter %>% filter(coef < 0)
    pos <- df_filter %>% filter(coef > 0)
    print(paste0("negative: ", nrow(neg)))
    print(paste0("positive: ", nrow(pos)))
        
}


```

After correlation analysis, we can count the number

```{r}
print_sig <- function(df){
    pos <- df %>% filter(padj<0.01 & coef>0.4) %>% nrow()
    neg <- df %>% filter(padj<0.01 & coef< -0.4) %>% nrow()
    
    print(paste0("positive: ", pos))
    print(paste0("negative: ", neg))
}
```
